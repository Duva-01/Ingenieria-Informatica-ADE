/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "calculadora.h"


void
op_basica_1(char *host, Operacion operacion)
{

	CLIENT *clnt;
	calc_res  *result_1;
	Operacion sumar_1_arg1;

#ifndef	DEBUG
	clnt = clnt_create (host, OP_BASICA, DIRVER, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	switch (operacion.operador)
    {
		case '+':

			result_1 = sumar_1(operacion, clnt);
			break;

		case '-':

			result_1 = restar_1(operacion, clnt);
			break;

		case 'x':

			result_1 = multiplicar_1(operacion, clnt);
			break;

		case '/':
			
			result_1 = dividir_1(operacion, clnt);
			break;
		
		default:
			break;
    }
	
	if (result_1 == (calc_res *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	// Mostramos el resultado obtenido del servidor

	printf("--> Resultado del Servidor: %d %c %d ==> %lf\n", operacion.a, operacion.operador, operacion.b, result_1->calc_res_u.resultado);

	xdr_free(xdr_calc_res, result_1);
	
	#ifndef	DEBUG
		clnt_destroy (clnt);
	#endif	 /* DEBUG */

}


void
op_compleja_1(char *host, vOper polinomio)
{
	CLIENT *clnt;
	calc_res_vec  *result_1;
	

#ifndef	DEBUG
	clnt = clnt_create (host, OP_COMPLEJA, DIRVER, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	
	result_1 = op_compleja_server_1(polinomio, clnt);
	if (result_1 == (calc_res *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	if (result_1 != NULL && result_1->calc_res_vec_u.resultado.resVec_val != NULL) {

		printf("\n --- Respuesta recibida --- \n");
		printf("El tamanio de la respuesta %i \n", result_1->calc_res_vec_u.resultado.resVec_len);
		for(int i=0; i<polinomio.vOper_len; i++){

			printf("Operacion del Cliente %i: %d %c %d ==> %lf \n", i, polinomio.vOper_val[i].a, polinomio.vOper_val[i].operador, polinomio.vOper_val[i].b, result_1->calc_res_vec_u.resultado.resVec_val[i]);
		}
	} else {
		printf("La respuesta es nula o el array resultado_complejo_val es nulo\n");
	}

	
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}

op_vectores_1(char *host, resVec vector1, resVec vector2, int opcion)
{
    CLIENT *clnt;
    calc_res_vec  *result_1;

#ifndef    DEBUG
    clnt = clnt_create (host, OP_VECTORES, DIRVER, "udp");
    if (clnt == NULL) {
        clnt_pcreateerror (host);
        exit (1);
    }
#endif    /* DEBUG */

    result_1 = op_vectores_server_1(vector1, vector2, opcion, clnt);
    if (result_1 == (calc_res_vec *) NULL) {
        clnt_perror (clnt, "call failed");
    }

	printf("\n -- Operacion Recibida -- \n");

	double * resultado = result_1->calc_res_vec_u.resultado.resVec_val;
	int size = result_1->calc_res_vec_u.resultado.resVec_len;

	switch (opcion)
	{
	case 1:
		
		printf("\n Vector 1: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector1.resVec_val[i]);
		}
		printf("\n+\n");
		printf("Vector 2: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector2.resVec_val[i]);
		}

		printf("\n\n --> Vector Resultado: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", resultado[i]);
		}

		break;
	
	case 2:
		
		printf("\n Vector 1: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector1.resVec_val[i]);
		}
		printf("\n-\n");
		printf("Vector 2: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector2.resVec_val[i]);
		}

		printf("\n\n --> Vector Resultado: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", resultado[i]);
		}

		break;

	case 3:
		
		printf("\n Vector 1: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector1.resVec_val[i]);
		}
		printf("\n*\n");
		printf("Vector 2: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector2.resVec_val[i]);
		}

		printf("\n\n --> Resultado (Escalar): %lf", resultado[0]);

		break;

	case 4:
		
		printf("\n Vector 1: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector1.resVec_val[i]);
		}
		printf("\nx\n");
		printf("Vector 2: ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", vector2.resVec_val[i]);
		}

		printf("\n\n --> Vector Resultado (Vectorial): ");
		for (int i = 0 ; i < size ; i++){
			printf("%lf ", resultado[i]);
		}

		break;

	
	default:
		break;
	}

#ifndef    DEBUG
    clnt_destroy (clnt);
#endif     /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;
	Operacion operacion;

	printf("Numero de argumentos: %d \n", argc);
	printf("Argumento 2: %s \n", argv[2]);

	host = argv[1];

	if (!strcmp(argv[2], "opb") && argc == 6){
		
		operacion.a = atoi(argv[3]);
		operacion.operador = argv[4][0];
		operacion.b = atoi(argv[5]);
		

		printf("Operacion del Cliente: %d %c %d\n", operacion.a, operacion.operador, operacion.b);
		op_basica_1 (host, operacion);
	}
	else if (!strcmp(argv[2], "pol")){

		int size = 0;
		int pos = 3;

		printf("Formato para creacion de polinomios (MAX 100): \n");
		printf("Seguimos la siguiente estructura: <valor> <operador> <valor>. \n");

		vOper polinomio;
		polinomio.vOper_val =  malloc(100.0 * sizeof(Operacion));

		do {

			polinomio.vOper_val[size].a = atoi(argv[pos]);
			pos++;
			polinomio.vOper_val[size].operador = argv[pos][0];
			pos++;
			polinomio.vOper_val[size].b = atoi(argv[pos]);
			pos++;
			size++;

		} while(pos != argc);

		polinomio.vOper_len = size;

		for(int i=0; i<polinomio.vOper_len; i++){
			printf("Operacion del Cliente %i: %d %c %d\n", i, polinomio.vOper_val[i].a, polinomio.vOper_val[i].operador, polinomio.vOper_val[i].b);
		}
		printf("El tamanio es: %i\n",size);
		op_compleja_1 (host, polinomio);
	}
	else if (!strcmp(argv[2], "vec")){
		
		int size;
		resVec vector1, vector2;
		double valor;

		printf("Formato: <vector> operador <vector> \n");
		printf("--> Introducir tamanio de los vectores: \n");
		scanf("%d", &size);

		// Vector 1
		vector1.resVec_len = size;
		vector1.resVec_val = malloc(size * sizeof(double));

		printf("\n Introduzca los valores para vector 1: ");
		for (int i = 0 ; i < size ; i++){
			scanf("%lf", &valor);
			vector1.resVec_val[i] = valor;
		}

		// Vector 2 
		vector2.resVec_len = size;
		vector2.resVec_val = malloc(size * sizeof(double));

		printf("\n Introduzca los valores para vector 2: ");
		for (int i = 0 ; i < size ; i++){
			scanf("%lf", &valor);
			vector2.resVec_val[i] = valor;
		}

		int opcion;

		printf("\n Introduzca que operacion realizar: \n");
		printf("1. Sumar \n");
		printf("2. Restar\n");
		printf("3. Escalar \n");
		printf("4. Vectorial (tam = 3) \n");
		scanf(" %i", &opcion);

		while(opcion < 1 || 4 < opcion){

			printf("\n -- Opcion no valida -- \n");

			printf("\n Introduzca que operacion realizar: \n");
			printf("1. Sumar \n");
			printf("2. Restar\n");
			printf("3. Escalar \n");
			printf("4. Vectorial (tam = 3) \n");
			scanf(" %i", &opcion);
		}

		op_vectores_1 (host, vector1, vector2, opcion);

	}
	else {
		
		printf ("-- DAVID MARTINEZ DIAZ - CALCULADORA RPC --\n", argv[0]);
		printf("Guia de comandos: \n");
		printf("-> Para realizar una operacion basica: servidor opb <valor1> <operador> <valor2> \n");
		printf("-> Para utilizar el modo polinomio: servidor pol. \n");
		printf("-> Para utilizar el modo vector: servidor vec. \n");
		exit (1);
	
	}
	
exit (0);
}